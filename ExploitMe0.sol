//Explain how someone could deposit more than 1 eth per block
//- Find a reentrancy vulnerability and send us a sample contract that exploits it
//- Optimise the `receive` function so that it is at least 20% cheaper and send a sample contract showing how the optimisation is done



//SPDX-License-Identifier: Unlicense
pragma solidity ^0.6.11;

contract ExploitMe0 {
    uint256 immutable DEPOSIT_LIMIT_PER_BLOCK = 1 ether;

    struct UserDeposit {
        uint256 balance;
        uint256 blockDeposited;
    }
    mapping(address => UserDeposit) public deposits;

    constructor() public {}

    receive() external payable {
        require(msg.value <= DEPOSIT_LIMIT_PER_BLOCK, "1 ETH ONLY");

        UserDeposit storage prev = deposits[tx.origin];

        uint256 maxDeposit = prev.blockDeposited == block.number
            ? DEPOSIT_LIMIT_PER_BLOCK - prev.balance
            : DEPOSIT_LIMIT_PER_BLOCK;

        if (msg.value > maxDeposit) {
            // refund user if they are above the max deposit allowed
            uint256 refundValue = maxDeposit - msg.value;

            (bool success, ) = msg.sender.call{value: refundValue}("");
            require(success, "ETH SEND FAILED");

            prev.balance -= refundValue;
        }

        prev.balance += msg.value;
        prev.blockDeposited = block.number;
    }

    function withdraw(uint256 amount) external {
        UserDeposit storage prev = deposits[tx.origin];
        require(prev.balance >= amount, "Insufficient balance");

        prev.balance -= amount;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "ETH SEND FAILED");
    }
}
